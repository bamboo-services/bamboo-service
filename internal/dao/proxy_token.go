// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"bamboo-service/internal/dao/internal"
	"bamboo-service/internal/model/entity"
	"context"
	"github.com/XiaoLFeng/bamboo-utils/berror"
	"github.com/XiaoLFeng/bamboo-utils/blog"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/google/uuid"
)

// proxyTokenDao is the data access object for the table fy_proxy_token.
// You can define custom methods on it to extend its functionality as needed.
type proxyTokenDao struct {
	*internal.ProxyTokenDao
}

var (
	// ProxyToken is a globally accessible object for table fy_proxy_token operations.
	ProxyToken = proxyTokenDao{internal.NewProxyTokenDao()}
)

// Add your custom methods and functionality below.

// CreateNewToken 创建用户代理令牌。
//
// 参数:
//   - ctx: 上下文，用于请求范围控制。
//   - userUUID: 用户的唯一标识符。
//   - name: 代理令牌的名称。
//   - desc: 代理令牌的描述信息。
//   - expiredAt: 代理令牌的过期时间。
//
// 返回:
//   - 返回创建的代理令牌实体对象。
//   - 若发生错误，返回对应的错误码。
func (cDAO *proxyTokenDao) CreateNewToken(ctx context.Context, userUUID, name, desc string, expiredAt *gtime.Time) (*entity.ProxyToken, *berror.ErrorCode) {
	blog.DaoInfo(ctx, "CreateNewToken", "创建用户 %s 代理令牌", userUUID)
	newProxyTokenEntity := &entity.ProxyToken{
		ProxyTokenUuid: uuid.New().String(),
		UserUuid:       userUUID,
		Name:           name,
		Description:    desc,
		CreatedAt:      gtime.Now(),
		ExpiredAt:      expiredAt,
	}
	_, sqlErr := cDAO.Ctx(ctx).Insert(&newProxyTokenEntity)
	if sqlErr != nil {
		blog.DaoError(ctx, "CreateNewToken", "创建用户 %s 代理令牌失败 %v", userUUID, sqlErr)
		return nil, berror.ErrorAddData(&berror.ErrDatabaseError, sqlErr.Error())
	}
	return newProxyTokenEntity, nil
}
