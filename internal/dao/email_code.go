// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"bamboo-service/internal/dao/internal"
	"bamboo-service/internal/model/do"
	"bamboo-service/internal/model/entity"
	"context"
	"github.com/XiaoLFeng/bamboo-utils/berror"
	"github.com/XiaoLFeng/bamboo-utils/blog"
	"github.com/XiaoLFeng/bamboo-utils/butil"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/google/uuid"
	"time"
)

// emailCodeDao is the data access object for the table fy_email_code.
// You can define custom methods on it to extend its functionality as needed.
type emailCodeDao struct {
	*internal.EmailCodeDao
}

var (
	// EmailCode is a globally accessible object for table fy_email_code operations.
	EmailCode = emailCodeDao{internal.NewEmailCodeDao()}
)

// Add your custom methods and functionality below.

// GetMailCodeList 根据邮箱地址获取邮件验证码列表。
//
// 参数:
//   - ctx: 上下文，用于控制生命周期等。
//   - email: 邮箱地址，用于查询对应的验证码记录。
//
// 返回:
//   - []*entity.EmailCode: 邮件验证码实体列表。
//   - *berror.ErrorCode: 错误信息，当数据库操作失败时返回。
func (cDao *emailCodeDao) GetMailCodeList(ctx context.Context, email string) ([]*entity.EmailCode, *berror.ErrorCode) {
	blog.DaoInfo(ctx, "GetMailCodeList", "获取 %s 的所有验证码", email)
	var list []*entity.EmailCode
	sqlErr := cDao.Ctx(ctx).Where(&do.EmailCode{Email: email}).OrderDesc(cDao.Columns().CreatedAt).Scan(&list)
	if sqlErr != nil {
		return nil, berror.ErrorAddData(berror.ErrDatabaseError, sqlErr)
	}
	return list, nil
}

// RemoveMailCode 删除指定验证码记录。
//
// 参数:
//   - ctx: 上下文，用于控制操作生命周期。
//   - mailCodeUUID: 验证码的唯一标识符。
//
// 返回:
//   - *berror.ErrorCode: 当数据库操作失败时返回错误信息，否则返回 nil。
func (cDao *emailCodeDao) RemoveMailCode(ctx context.Context, mailCodeUUID string) *berror.ErrorCode {
	blog.DaoInfo(ctx, "RemoveMailCode", "删除 %s 的验证码", mailCodeUUID)
	_, sqlErr := cDao.Ctx(ctx).Where(&do.EmailCode{CodeUuid: mailCodeUUID}).Delete()
	if sqlErr != nil {
		return berror.ErrorAddData(berror.ErrDatabaseError, sqlErr)
	}
	return nil
}

// ClearMailCode 清除指定邮箱的所有验证码记录。
//
// 参数:
//   - ctx: 上下文，用于控制生命周期。
//   - email: 邮箱地址，用于定位需要删除的验证码记录。
//
// 返回:
//   - int64: 删除的记录数。
//   - *berror.ErrorCode: 错误信息，当出现数据库操作错误时返回。
func (cDao *emailCodeDao) ClearMailCode(ctx context.Context, email string) (int64, *berror.ErrorCode) {
	blog.DaoInfo(ctx, "ClearMailCode", "清除 %s 的验证码", email)
	result, sqlErr := cDao.Ctx(ctx).Where(&do.EmailCode{Email: email}).Delete()
	if sqlErr != nil {
		return 0, berror.ErrorAddData(berror.ErrDatabaseError, sqlErr)
	}
	rowsAffected, sqlErr := result.RowsAffected()
	if sqlErr != nil {
		return 0, berror.ErrorAddData(berror.ErrDatabaseError, sqlErr)
	}
	return rowsAffected, nil
}

// CreateMailCode 创建邮件验证码记录。
//
// 参数:
//   - ctx: 上下文，用于控制操作生命周期。
//   - email: 邮箱地址，用于指定生成验证码的接收者。
//   - purpose: 验证码用途，例如注册、密码重置等。
//
// 返回:
//   - *entity.EmailCode: 生成的邮件验证码实体。
//   - *berror.ErrorCode: 错误信息，当数据库操作失败时返回。
func (cDao *emailCodeDao) CreateMailCode(ctx context.Context, email string, purpose string) (*entity.EmailCode, *berror.ErrorCode) {
	blog.DaoInfo(ctx, "CreateMailCode", "创建 %s 的验证码", email)
	// 生成新 Code
	newCode := butil.RandomString(6)
	newMailCode := &entity.EmailCode{
		CodeUuid:  uuid.New().String(),
		Email:     email,
		Code:      newCode,
		Purpose:   purpose,
		ExpiredAt: gtime.Now().Add(30 * time.Minute),
		CreatedAt: gtime.Now(),
		UpdatedAt: gtime.Now(),
	}
	_, sqlErr := cDao.Ctx(ctx).Insert(newMailCode)
	if sqlErr != nil {
		return nil, berror.ErrorAddData(berror.ErrDatabaseError, sqlErr)
	}
	return newMailCode, nil
}
